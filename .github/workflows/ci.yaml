name: test

on:
  push:
    branches:
    - "main"
    - "release-v**"
  pull_request:
    branches:
    - "*"

jobs:
  test:
    name: Test
    # This job runs on Linux
    runs-on: ubuntu-latest
    container: golang:1.19

    services:
      zookeeper:
        image: bitnami/zookeeper:3.8
        env:
          ALLOW_ANONYMOUS_LOGIN: "yes"
          ZOO_ENABLE_AUTH: "yes"
          ZOO_SERVER_USERS: "admin"
          ZOO_SERVER_PASSWORDS: "admin-secret"
          # ZOO_CLIENT_USER: "admin"
          # ZOO_CLIENT_PASSWORD: "admin-secret"
          BITNAMI_DEBUG: "true"
      kafka:
        image: bitnami/kafka:3.3
        env:
          ALLOW_PLAINTEXT_LISTENER: "yes"
          KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_CFG_LISTENERS: CONTROLLER://:9095,INTERNAL://:9094,SASL_CLIENT://:9093,CLIENT://:9092
          KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://:9094,SASL_CLIENT://kafka:9093,CLIENT://kafka:9092
          KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
          KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@127.0.0.1:9095
          KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,SASL_CLIENT:SASL_PLAINTEXT,CLIENT:PLAINTEXT
          KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
          KAFKA_ENABLE_KRAFT: "yes"
          KAFKA_CFG_BROKER_ID: 1
          KAFKA_BROKER_ID: 1
          KAFKA_CFG_PROCESS_ROLES: broker,controller
          KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
          #Client credentials
          KAFKA_CLIENT_USERS: admin
          KAFKA_CLIENT_PASSWORDS: admin-secret
          # KAFKA_ZOOKEEPER_USER: admin
          # KAFKA_ZOOKEEPER_PASSWORD: admin-secret
          BITNAMI_DEBUG: "true"
          LOG4J_LOGGER_KAFKA_REQUEST_LOGGER: "TRACE, stdout"
          LOG4J_LOGGER_KAFKA: TRACE
          LOG4J_LOGGER_ORG_APACHE_KAFKA: TRACE
        # options: --health-cmd "nc -zv kafka 9092 || exit -1" --health-start-period "120s" --health-timeout "5s" --health-retries "10"
      localstack:
        image: localstack/localstack
        env:
          SERVICES: secretsmanager
          AWS_ACCESS_KEY_ID: 0
          AWS_SECRET_ACCESS_KEY: 0
          AWS_DEFAULT_REGION: eu-west-1
          AWS_REGION: eu-west-1
          DEBUG: 1
          START_WEB: 0
          DOCKER_HOST: unix:///var/run/docker.sock

    steps:
      - uses: actions/checkout@v4   
      - name: Install AWS CLI,  curl and httpie
        id: install
        run: |
          apt-get update 
          apt-get install -y curl python3-pip python3 unzip default-jre
          pip3 install --user httpie
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip" 
          unzip /tmp/awscliv2.zip -d /tmp
          /tmp/aws/install
          aws --version
          curl https://downloads.apache.org/kafka/3.3.2/kafka_2.13-3.3.2.tgz -o "/tmp/kafka.tgz"
          tar -xzf /tmp/kafka.tgz -C /tmp
          echo kafka-bins=/tmp/kafka_2.13-3.3.2/bin >> $GITHUB_OUTPUT
      - name: Setup secrets
        run: make secretsmanager
        env:
          AWS_ACCESS_KEY_ID: 0
          AWS_SECRET_ACCESS_KEY: 0
          AWS_REGION: eu-west-1
          SM_HOST: http://localstack:4566
      - name: Setup topics
        run: make topics
        env:
          KAFKA_CLI_PATH: ${{ steps.install.outputs.kafka-bins }}
          TOPIC_NAME: test
          KAFKA_HOST: kafka:9092

      - name: Test
        run: make test
        env:
          GO111MODULE: "on"
          KAFKA_CNX_STRING: kafka:9092
          KAFKA_SASL_CNX_STRING: kafka:9093
          KAFKA_TOPIC: test
          WAIT_TIME_MS: "5000"
          GO_BIN: ${{ github.workspace }}/app
          MAIN_DIR: ${{ github.workspace }}
          AWS_ACCESS_KEY_ID: 0
          AWS_SECRET_ACCESS_KEY: 0
          AWS_REGION: eu-west-1
          AWS_ENDPOINT: http://localstack:4566
          AWS_SM_ENDPOINT: http://localstack:4566
      - uses: codecov/codecov-action@v3
        with:
          files: ./coverage.out